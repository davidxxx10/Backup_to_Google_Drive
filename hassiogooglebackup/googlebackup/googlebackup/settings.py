"""
Django settings for googlebackup project.

Generated by 'django-admin startproject' using Django 2.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import mimetypes

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Application settings here in this section. Most are related to
# integrating with Home Assistant and Hass.io.
#
# This group of application settings get overridden for local execution
DATA_PATH = "/data"
HA_BASE_URL = "http://hassio/homeassistant/api"
HA_TOKEN = str(os.environ.get("HASSIO_TOKEN"))
HA_MQTT_PUBLISH_URL = HA_BASE_URL + "/services/mqtt/publish"

# This group of application settings are the same regardless of
# local or production execution.
HA_MQTT_RESULT_TOPIC = "googlebackup/result"
HA_MQTT_RESULT_RETAIN = "False"
HA_MQTT_ADHOC_RESULT_TOPIC = "googlebackup/adhocresult"
HA_MQTT_ADHOC_RESULT_RETAIN = "False"

# Initialize mimetypes
mimetypes.init()
mimetypes.add_type("text/x-yaml", ".yaml")
mimetypes.add_type("text/x-yaml", ".yml")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "70mm#takprrt)6$=k(2h!dikc0d6qwo5#czl(+!oy$=xdv^2=l"

SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

ALLOWED_HOSTS = ["*", "[::1]"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "gb",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

gb_slug = str(os.environ.get("GB_SLUG"))
ROOT_URLCONF = "googlebackup.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "googlebackup.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", },
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator", },
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator", },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/static/"

# Attempt to pull in local settings (which will override any primary
# settings of the same name, except for logging.basicConfig which
# can be done only once), if they exist. If they don't exist,
# that just means that we're not running locally but we're running in a
# container instead.
#
# In order to run locally, using local settings, you just need to enusre
# that a file named local_settings.py exists in the same directory as
# the normal settings.py Django settings file. The local_settings.py file
# should be ignored by version control so that it doesn't end up in the code
# that gets built into the production container image.
try:
    from .local_settings import *  # noqa: E402,F403,F401
except ImportError:
    # GB_DEBUG is set in run.sh based on "debug" setting in options.json
    gb_debug = str(os.environ.get("GB_DEBUG"))
    print("gb_debug = " + gb_debug)
    if gb_debug == "true":
        print("Setting up debug logging")
        # SECURITY WARNING: don't run with debug turned on in production!
        DEBUG = True
        import logging

        logging.basicConfig(level="DEBUG")
        logging.getLogger("googleapiclient.discovery_cache").setLevel(logging.ERROR)
    else:
        print("Setting up normal logging")
        # SECURITY WARNING: don't run with debug turned on in production!
        DEBUG = False
        import logging

        logging.basicConfig(level="INFO")
        logging.getLogger("googleapiclient.discovery_cache").setLevel(logging.ERROR)
    logging.info("No local_settings to import")
